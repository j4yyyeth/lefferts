---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  isHome?: boolean;
  disableTransitions?: boolean;
  keywords?: string;
  ogImage?: string;
  ogType?: string;
  twitterCard?: string;
  canonicalUrl?: string;
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  noindex?: boolean;
  nofollow?: boolean;
}

const {
  title,
  description = '',
  isHome = false,
  disableTransitions = false,
  keywords = 'Lefferts, Real Estate, Development, Investments, Miami Real Estate, Mendy Chudaitov',
  ogImage = '/images/og.png',
  ogType = 'website',
  twitterCard = 'summary_large_image',
  canonicalUrl,
  author = '',
  publishedTime = '',
  modifiedTime = '',
  noindex = false,
  nofollow = false,
} = Astro.props;

const siteUrl = Astro.site?.toString() || 'https://lefferts.com';
const fullUrl = canonicalUrl || new URL(Astro.url.pathname, siteUrl).toString();
const fullOgImage = new URL(ogImage, siteUrl).toString();
const robotsContent = `${noindex ? 'noindex' : 'index'},${nofollow ? 'nofollow' : 'follow'}`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>{title}</title>
    <meta name="description" content={description} />
    {keywords && <meta name="keywords" content={keywords} />}
    <meta name="robots" content={robotsContent} />
    <meta name="googlebot" content={robotsContent} />
    {author && <meta name="author" content={author} />}
    <meta name="generator" content={Astro.generator} />

    <link rel="canonical" href={fullUrl} />
    <link rel="icon" type="image/svg+xml" href="/images/icon.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/images/icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/images/icon.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/images/icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="#ffffff" />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={fullUrl} />
    <meta property="og:image" content={fullOgImage} />
    <meta property="og:image:width" content="1059" />
    <meta property="og:image:height" content="602" />
    <meta property="og:image:alt" content={description || title} />
    <meta property="og:site_name" content="Your Site Name" />
    <meta property="og:locale" content="en_US" />
    {
      publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )
    }
    {
      modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
      )
    }
    {author && <meta property="article:author" content={author} />}

    <meta name="twitter:card" content={twitterCard} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullOgImage} />
    <meta name="twitter:image:alt" content={description || title} />
    <meta name="twitter:site" content="@yourhandle" />
    <meta name="twitter:creator" content="@yourhandle" />

    <link
      rel="preload"
      href="/fonts/hudson.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/hudson-bold.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/neue-l.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/neue-m.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />

    {!disableTransitions && <ViewTransitions />}

    <style>
      html {
        view-transition-name: none;
      }

      video {
        view-transition-name: none;
      }

      img[transition\:name] {
        view-transition-name: var(--transition-name);
      }

      @media (prefers-reduced-motion: no-preference) {
        html {
          view-transition-name: root;
        }
      }

      @supports (-webkit-appearance: none) {
        video {
          -webkit-transform: translateZ(0);
          transform: translateZ(0);
          -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
        }
      }
    </style>

    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Lefferts",
        "url": "{siteUrl}",
        "description": "{description}",
        "potentialAction": {
          "@type": "SearchAction",
          "target": "{siteUrl}/search?q={search_term_string}",
          "query-input": "required name=search_term_string"
        }
      }
    </script>
  </head>
  <body>
    <Header isHome={isHome} />
    <main class={isHome ? 'home-main' : 'page-main'}>
      <slot />
    </main>
    <Footer showNewsletter={isHome} />

    <script>
      import '../scripts/main.js';

      document.addEventListener('astro:before-preparation', (e) => {
        const videos = document.querySelectorAll('video');
        videos.forEach((video) => {
          if (!video.paused) {
            video.pause();
            video.dataset.pausedAt = video.currentTime.toString();
          }
        });
      });

      window.addEventListener('focus', () => {
        setTimeout(() => {
          const heroVideo = document.querySelector('.hero-vid video');
          if (heroVideo && heroVideo.paused) {
            heroVideo.play().catch((e) => {});
          }
        }, 100);
      });

      window.addEventListener('pageshow', (event) => {
        if (event.persisted) {
          setTimeout(() => {
            const videos = document.querySelectorAll('video');
            videos.forEach((video) => {
              if (video.paused) {
                video.currentTime = 0;
                video
                  .play()
                  .catch((e) => {});
              }
            });
          }, 200);
        }
      });
    </script>
  </body>
</html>