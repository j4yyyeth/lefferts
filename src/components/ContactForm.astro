<div class="form-div-wrapper contact-container">
  <form class="contact-form" method="post" action="#">
    <div class="form-group">
      <label for="firstName">First Name *</label>
      <input type="text" id="firstName" name="firstName" required />
    </div>

    <div class="form-group">
      <label for="lastName">Last Name *</label>
      <input type="text" id="lastName" name="lastName" required />
    </div>

    <div class="form-group full-width">
      <label for="email">Email *</label>
      <input type="email" id="email" name="email" required />
    </div>

    <div class="form-group full-width">
      <label for="message">Message</label>
      <textarea id="message" name="message" rows="4"></textarea>
    </div>

    <div class="form-group full-width">
      <div class="cf-turnstile" data-sitekey="0x4AAAAAABnGYh55M5coCtFR"></div>
    </div>

    <div class="form-group full-width">
      <button class="contact-submit" type="submit">Submit</button>
    </div>
  </form>
</div>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  function initializeContactForm() {
    const contactForm = document.querySelector('.contact-form');
    
    if (!contactForm) {
      console.log('Contact form not found');
      return;
    }

    console.log('Contact form found, initializing...');

    // Remove any existing event listeners
    contactForm.removeEventListener('submit', handleFormSubmit);
    
    // Add the event listener
    contactForm.addEventListener('submit', handleFormSubmit);
  }

  async function handleFormSubmit(e) {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('Form submission intercepted');

    const submitButton = this.querySelector('.contact-submit');
    const originalText = submitButton.textContent;

    // Show loading state
    submitButton.textContent = 'SENDING...';
    submitButton.disabled = true;
    submitButton.style.opacity = '0.7';

    const formData = new FormData(this);
    
    // Get Turnstile token
    const turnstileResponse = document.querySelector('[name="cf-turnstile-response"]')?.value;
    
    if (!turnstileResponse) {
      alert('Please complete the security verification.');
      submitButton.textContent = originalText;
      submitButton.disabled = false;
      submitButton.style.opacity = '1';
      return;
    }
    
    const data = {
      form_type: 'contact',
      firstName: formData.get('firstName'),
      lastName: formData.get('lastName'),
      email: formData.get('email'),
      message: formData.get('message') || '',
      'cf-turnstile-response': turnstileResponse,
    };

    console.log('Sending data:', data);

    try {
      const response = await fetch('/form-handler.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));

      // Check if response is actually JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('Non-JSON response:', textResponse);
        throw new Error(
          'Server returned non-JSON response: ' +
            textResponse.substring(0, 100)
        );
      }

      const result = await response.json();
      console.log('Response data:', result);

      if (response.ok && result.success) {
        // Show success message
        const container = document.querySelector('.contact-container');
        container.innerHTML = `
          <div class="success-message" style="text-align: center;">
            <h3>Message Sent Successfully!</h3>
            <p>${result.message}</p>
          </div>
        `;
      } else {
        const errorMessage = result.error || 'Unknown error occurred';
        alert('Error: ' + errorMessage);

        // Reset button
        submitButton.textContent = originalText;
        submitButton.disabled = false;
        submitButton.style.opacity = '1';
      }
    } catch (error) {
      console.error('Fetch error:', error);
      
      let errorMessage = 'There was an error sending your message. ';

      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage += 'Please check your internet connection.';
      } else if (error.message.includes('JSON')) {
        errorMessage += 'Server response format error.';
      } else if (error.message.includes('non-JSON')) {
        errorMessage += 'Server configuration issue.';
      } else {
        errorMessage += 'Please try again later.';
      }

      alert(errorMessage);

      // Reset button
      submitButton.textContent = originalText;
      submitButton.disabled = false;
      submitButton.style.opacity = '1';
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeContactForm);
  } else {
    initializeContactForm();
  }

  // Re-initialize after view transitions (for Astro)
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initializeContactForm, 50);
  });

  // Also initialize after page load as a fallback
  window.addEventListener('load', initializeContactForm);
</script>

<style>
  .error-message {
    color: #ef4444;
    font-size: 14px;
    margin-top: 5px;
    margin-bottom: 0;
  }

  .success-message {
    background-color: #dcfce7;
    border: 1px solid #bbf7d0;
    color: #166534;
    padding: 15px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
  }

  .success-message h3 {
    margin: 0 0 10px 0;
    font-size: 18px;
  }

  .success-message p {
    margin: 0;
    font-weight: 600;
  }
  
  .contact-container:has(.success-message) .contact-form {
    display: none !important;
  }
</style>