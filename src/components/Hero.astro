---
export interface Props {
  text: string;
  videoSrc?: string;
}

const { text, videoSrc } = Astro.props;
---

<div class="hero-section">
  <div class="hero-vid">
    {videoSrc && (
      <video 
        playsinline 
        autoplay 
        muted 
        loop 
        preload="auto"
        webkit-playsinline="true"
        data-hero-video="true"
        style="width: 100%; height: 100%; object-fit: cover;"
      >
        <source src={videoSrc} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    )}
  </div>
  <div class="hero-content">
    <h1>{text}</h1>
  </div>
  <div class="arrow">
    <a href="#site" class="down-arrow" aria-label="Scroll down"></a>
  </div>
</div>

<script>
  // Hero-specific video initialization
  function initializeHeroVideoComponent() {
    const heroVideo = document.querySelector('[data-hero-video]');
    
    if (heroVideo) {
      // Ensure all required attributes are set
      heroVideo.muted = true;
      heroVideo.playsInline = true;
      heroVideo.autoplay = true;
      heroVideo.loop = true;
      
      // Safari-specific attributes
      heroVideo.setAttribute('webkit-playsinline', 'true');
      heroVideo.setAttribute('playsinline', 'true');
      
      // Force video to start
      const startVideo = () => {
        heroVideo.currentTime = 0;
        const playPromise = heroVideo.play();
        
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('Hero video started successfully');
            })
            .catch(error => {
              console.log('Hero video autoplay prevented:', error);
              
              // Try again on user interaction
              const playOnTouch = () => {
                heroVideo.play()
                  .then(() => console.log('Hero video started on interaction'))
                  .catch(e => console.log('Hero video interaction play failed:', e));
              };
              
              document.addEventListener('click', playOnTouch, { once: true });
              document.addEventListener('touchstart', playOnTouch, { once: true });
            });
        }
      };
      
      // Start video when it's ready
      if (heroVideo.readyState >= 3) {
        startVideo();
      } else {
        heroVideo.addEventListener('loadeddata', startVideo, { once: true });
        heroVideo.addEventListener('canplay', startVideo, { once: true });
      }
      
      // Handle video errors
      heroVideo.addEventListener('error', (e) => {
        console.error('Hero video error:', e);
      });
      
      // Ensure proper looping
      heroVideo.addEventListener('ended', () => {
        heroVideo.currentTime = 0;
        heroVideo.play().catch(e => console.log('Hero video loop failed:', e));
      });
    }
  }
  
  // Initialize immediately
  initializeHeroVideoComponent();
  
  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initializeHeroVideoComponent, 100);
  });
</script>