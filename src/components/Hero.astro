---
export interface Props {
  text: string;
  videoSrc?: string;
}

const { text, videoSrc } = Astro.props;
---

<div class="hero-section">
  <div class="hero-vid">
    {videoSrc && (
      <video 
        playsinline 
        autoplay 
        muted 
        loop 
        preload="metadata"
        webkit-playsinline="true"
        data-hero-video="true"
        style="width: 100%; height: 100%; object-fit: cover; opacity: 0; transition: opacity 0.5s ease;"
      >
        <source src={videoSrc} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    )}
    {/* Fallback background while video loads */}
    <div class="hero-fallback" style="position: absolute; inset: 0; background: #fff; z-index: -1;"></div>
  </div>
  <div class="hero-content" style="opacity: 0; transition: opacity 0.5s ease 0.2s;">
    <h1>{text}</h1>
  </div>
  <div class="arrow" style="opacity: 0; transition: opacity 0.5s ease 0.4s;">
    <a href="#site" class="down-arrow" aria-label="Scroll down"></a>
  </div>
</div>

<script>
  // Hero-specific video initialization
  function initializeHeroVideoComponent() {
    const heroVideo = document.querySelector('[data-hero-video]') as HTMLVideoElement;
    const heroContent = document.querySelector('.hero-content') as HTMLElement;
    const heroArrow = document.querySelector('.arrow') as HTMLElement;
    
    if (heroVideo) {
      // Ensure all required attributes are set
      heroVideo.muted = true;
      heroVideo.playsInline = true;
      heroVideo.autoplay = true;
      heroVideo.loop = true;
      
      // Safari-specific attributes
      heroVideo.setAttribute('webkit-playsinline', 'true');
      heroVideo.setAttribute('playsinline', 'true');
      
      let videoStarted = false;
      
      // Function to show video smoothly
      const showVideo = () => {
        if (!videoStarted) {
          heroVideo.style.opacity = '1';
          videoStarted = true;
          
          // Show content after video appears with CSS transitions
          setTimeout(() => {
            if (heroContent) heroContent.style.opacity = '1';
          }, 200);
          
          setTimeout(() => {
            if (heroArrow) heroArrow.style.opacity = '1';
          }, 400);
        }
      };
      
      // Force video to start
      const startVideo = () => {
        heroVideo.currentTime = 0;
        const playPromise = heroVideo.play();
        
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('Hero video started successfully');
              showVideo();
            })
            .catch(error => {
              console.log('Hero video autoplay prevented:', error);
              // Show content even if video fails
              showVideo();
              
              // Try again on user interaction
              const playOnTouch = () => {
                heroVideo.play()
                  .then(() => {
                    console.log('Hero video started on interaction');
                    showVideo();
                  })
                  .catch(e => console.log('Hero video interaction play failed:', e));
              };
              
              document.addEventListener('click', playOnTouch, { once: true });
              document.addEventListener('touchstart', playOnTouch, { once: true });
            });
        }
      };
      
      // Start video when it's ready
      if (heroVideo.readyState >= 2) {
        startVideo();
      } else {
        heroVideo.addEventListener('loadeddata', startVideo, { once: true });
        heroVideo.addEventListener('canplaythrough', () => {
          if (!videoStarted) startVideo();
        }, { once: true });
        
        // Fallback timeout to show content
        setTimeout(() => {
          if (!videoStarted) {
            console.log('Video loading timeout, showing content anyway');
            showVideo();
          }
        }, 2000);
      }
      
      // Handle video errors
      heroVideo.addEventListener('error', (e) => {
        console.error('Hero video error:', e);
        showVideo(); // Show content even on error
      });
      
      // Ensure proper looping
      heroVideo.addEventListener('ended', () => {
        heroVideo.currentTime = 0;
        heroVideo.play().catch(e => console.log('Hero video loop failed:', e));
      });
    } else {
      // No video, just show content
      if (heroContent) heroContent.style.opacity = '1';
      if (heroArrow) heroArrow.style.opacity = '1';
    }
  }
  
  // Initialize immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeHeroVideoComponent);
  } else {
    initializeHeroVideoComponent();
  }
  
  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initializeHeroVideoComponent, 50);
  });
</script>