---
import portfolioData from '../data/portfolio.json';

export interface Props {
  property: {
    id: number;
    slug: string;
    title: string;
    address?: string;
    type?: string;
    design?: string;
    website?: string;
    content: string;
    featuredImage?: string;
    featuredVideo?: string;
    gallery?: string[];
    highlights?: string[];
  };
}

const { property } = Astro.props;

// Get all properties and filter out the current one
const allProperties = portfolioData.properties;
const currentPropertyIndex = allProperties.findIndex(
  (p) => p.id === property.id
);

// Create a list of other properties starting from the next one in order
let otherProperties = [];
if (currentPropertyIndex !== -1) {
  // Get properties after current one
  const propertiesAfter = allProperties.slice(currentPropertyIndex + 1);
  // Get properties before current one
  const propertiesBefore = allProperties.slice(0, currentPropertyIndex);
  // Combine them (after + before) to maintain order but exclude current
  otherProperties = [...propertiesAfter, ...propertiesBefore];
} else {
  // Fallback: if current property not found, show all others
  otherProperties = allProperties.filter((p) => p.id !== property.id);
}

// Calculate layout based on media count
const totalMedia =
  (property.featuredVideo ? 1 : 0) +
  (property.featuredImage ? 1 : 0) +
  (property.gallery ? property.gallery.length : 0);
const layoutClass = totalMedia >= 4 ? 'grid-layout' : 'flex-layout';

// Get website URL without protocol for display
const websiteDisplay = property.website
  ? property.website.replace(/^https?:\/\//, '')
  : '';
---

<main class="page-wrapper">
  <div class="container">
    <!-- Mobile Gallery -->
    {
      property.gallery && property.gallery.length > 0 && (
        <div class="glide glide-gallery glide-first">
          <div class="glide__track" data-glide-el="track">
            <ul class="glide__slides">
              {property.featuredVideo && (
                <li class="glide__slide">
                  <div class="mobile-video-container">
                    <div class="skeleton-placeholder" />
                    <video
                      class="gallery-video loaded"
                      playsinline
                      autoplay
                      muted
                      loop
                      width="689"
                      height="400"
                      onloadeddata="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                      style="opacity: 0; transition: opacity 0.3s ease;"
                    >
                      <source src={property.featuredVideo} type="video/mp4" />
                    </video>
                  </div>
                </li>
              )}
              {property.featuredImage && !property.featuredVideo && (
                <li class="glide__slide">
                  <div class="mobile-image-container">
                    <div class="skeleton-placeholder" />
                    <img
                      class="gallery-image"
                      src={property.featuredImage}
                      alt="Featured Image"
                      width="689"
                      height="400"
                      transition:name={`property-image-${property.id}`}
                      onload="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                      style="opacity: 0; transition: opacity 0.3s ease;"
                    />
                  </div>
                </li>
              )}
              {property.gallery.map((image, index) => (
                <li class="glide__slide">
                  <div class="mobile-image-container">
                    <div class="skeleton-placeholder" />
                    <img
                      class="gallery-image"
                      src={image}
                      alt={`${property.title} gallery image ${index + 1}`}
                      width="689"
                      height="400"
                      onload="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                      style="opacity: 0; transition: opacity 0.3s ease;"
                    />
                  </div>
                </li>
              ))}
            </ul>
          </div>
          <div class="glide__arrows" data-glide-el="controls">
            <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
              <div class="arrow-left" />
            </button>
            <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
              <div class="arrow-right" />
            </button>
          </div>
        </div>
      )
    }

    <div class="property-wrapper">
      <!-- Desktop Image Sidebar -->
      <div class={`images-sidebar ${layoutClass}`}>
        {
          property.featuredVideo && (
            <div class="gallery-item video-container" data-index="0">
              <div class="skeleton-placeholder" />
              <video
                class="property-featured-img loaded"
                playsinline
                autoplay
                muted
                loop
                width="689"
                onloadeddata="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                style="opacity: 0; transition: opacity 0.3s ease;"
              >
                <source src={property.featuredVideo} type="video/mp4" />
              </video>
            </div>
          )
        }
        {
          property.featuredImage && !property.featuredVideo && (
            <div class="gallery-item image-container" data-index="0">
              <div class="skeleton-placeholder" />
              <img
                class="property-featured-img gallery-item-img"
                src={property.featuredImage}
                width="689"
                alt={`${property.title} featured image`}
                transition:name={`property-image-${property.id}`}
                onload="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                style="opacity: 0; transition: opacity 0.3s ease;"
              />
            </div>
          )
        }
        {
          property.gallery &&
            property.gallery.map((image, index) => {
              // Calculate the correct data-index based on whether there's a featured video or image
              const dataIndex =
                property.featuredVideo || property.featuredImage
                  ? index + 1
                  : index;
              return (
                <div
                  class="gallery-item image-container"
                  data-index={dataIndex}
                >
                  <div class="skeleton-placeholder" />
                  <img
                    src={image}
                    alt={`${property.title} gallery image ${index + 1}`}
                    class="gallery-item-img"
                    width="689"
                    height="400"
                    onload="this.style.opacity = '1'; this.parentElement.querySelector('.skeleton-placeholder').style.display = 'none';"
                    style="opacity: 0; transition: opacity 0.3s ease;"
                  />
                </div>
              );
            })
        }
      </div>

      <!-- Property Info -->
      <div class="property-info-wrapper">
        <div class="property-info">
          <h1>{property.title}</h1>
          <div set:html={property.content} />

          {/* Count paragraphs to show read more button if needed */}
          {
            property.content && property.content.split('<p>').length > 2 && (
              <button class="read-more-property">Read More</button>
            )
          }

          <div class="details">
            {
              property.address && (
                <div class="detail">
                  <h4>Address</h4>
                  <p>{property.address}</p>
                </div>
              )
            }
            {
              property.type && (
                <div class="detail">
                  <h4>Project Type</h4>
                  <p>{property.type}</p>
                </div>
              )
            }
            {
              property.design && (
                <div class="detail">
                  <h4>Design</h4>
                  <p>{property.design}</p>
                </div>
              )
            }
            {
              property.website && (
                <div class="detail">
                  <h4>Web Site</h4>
                  <div class="website">
                    <svg
                      width="13.56"
                      height="17.873"
                      viewBox="0 0 13.56 17.873"
                    >
                      <g clip-path="url(#clip-path)">
                        <path
                          d="M11.018,54.256a3.654,3.654,0,0,1-1.009,2.78c-1.34,1.361-2.678,2.725-4.053,4.05a3.544,3.544,0,0,1-4.935.023,3.582,3.582,0,0,1-.069-4.938c.449-.492.937-.947,1.405-1.421.215-.218.472-.309.7-.08s.144.487-.071.7c-.439.44-.886.874-1.316,1.322a2.658,2.658,0,0,0-.041,3.773,2.654,2.654,0,0,0,3.724-.031q2.029-1.975,4-4.006a2.624,2.624,0,0,0,.018-3.765,2.671,2.671,0,0,0-3.728.045c-.277.257-.575.761-.973.342-.436-.458.123-.756.408-1.008a3.45,3.45,0,0,1,3.887-.691,3.2,3.2,0,0,1,2.049,2.9"
                          transform="translate(0 -44.226)"
                        />
                        <path
                          d="M30.143,3.365A3.494,3.494,0,0,1,29.2,5.937c-.423.455-.873.887-1.311,1.328-.212.214-.451.309-.7.077s-.142-.486.062-.7c.4-.414.823-.811,1.221-1.229a2.638,2.638,0,0,0,.053-3.769,2.656,2.656,0,0,0-3.776.063q-1.979,1.933-3.913,3.912A2.655,2.655,0,0,0,20.73,9.4a2.682,2.682,0,0,0,3.728.033c.083-.073.156-.161.245-.225a.435.435,0,0,1,.649.072c.179.214.081.4-.072.593a3.721,3.721,0,0,1-3.714,1.04,3.416,3.416,0,0,1-2.4-2.836,3.513,3.513,0,0,1,.971-3C21.475,3.713,22.807,2.34,24.2,1.029A3.452,3.452,0,0,1,28.085.3a3.272,3.272,0,0,1,2.059,3.062"
                          transform="translate(-16.584 0)"
                        />
                      </g>
                    </svg>
                    <a target="_blank" href={property.website}>
                      {websiteDisplay}
                    </a>
                  </div>
                </div>
              )
            }
            {
              property.highlights &&
                Array.isArray(property.highlights) &&
                property.highlights.length > 0 && (
                  <div class="detail highlights-detail">
                    <h4>Highlights</h4>
                    <div class="highlights-grid">
                      {property.highlights.map((highlight) => (
                        <div class="highlight-item">{highlight}</div>
                      ))}
                    </div>
                  </div>
                )
            }
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Additional Projects Slider -->
  <div class="glide-posts-container">
    <h3>Additional Projects</h3>
    <div class="glide glide-posts">
      <div class="glide__track" data-glide-el="track">
        <ul class="glide__slides">
          {
            otherProperties.map((proj) => (
              <li class="glide__slide">
                <a
                  href={`/portfolio/${proj.slug}`}
                  class="building-wrapper-slider"
                >
                  <div
                    class="building-slider"
                    style={`background-image: url('${proj.featuredImage}');`}
                  />
                  <p>{proj.title}</p>
                </a>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="glide__arrows" data-glide-el="controls">
        <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
          <div class="arrow-left"></div>
        </button>
        <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
          <div class="arrow-right"></div>
        </button>
      </div>
    </div>
  </div>
</main>

<!-- Gallery Modal -->
<div id="galleryModal" class="modal" transition:persist>
  <div class="modal-content">
    <div class="glide glide-modal">
      <div class="glide__track" data-glide-el="track">
        <ul class="glide__slides">
          {
            property.featuredVideo && (
              <li class="glide__slide">
                <video class="modal-media" playsinline controls>
                  <source src={property.featuredVideo} type="video/mp4" />
                </video>
              </li>
            )
          }
          {
            property.featuredImage && !property.featuredVideo && (
              <li class="glide__slide">
                <img
                  class="modal-media"
                  src={property.featuredImage}
                  alt={`${property.title} featured image`}
                />
              </li>
            )
          }
          {
            property.gallery &&
              property.gallery.map((image, index) => (
                <li class="glide__slide">
                  <img
                    class="modal-media"
                    src={image}
                    alt={`${property.title} gallery image ${index + 1}`}
                  />
                </li>
              ))
          }
        </ul>
      </div>
      <div class="glide__arrows" data-glide-el="controls">
        <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
          <div class="arrow-left"></div>
        </button>
        <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
          <div class="arrow-right"></div>
        </button>
      </div>
    </div>
  </div>
  <span class="close">&times;</span>
</div>

<style>
  .image-container,
  .mobile-image-container,
  .video-container,
  .mobile-video-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .skeleton-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #e2e5e7;
    background-image: linear-gradient(
      90deg,
      #e2e5e7 0px,
      #f5f5f5 40px,
      #e2e5e7 80px
    );
    background-size: 600px;
    animation: shimmer 1.6s ease-in-out infinite;
    border-radius: 4px;
    z-index: 0;
  }

  @keyframes shimmer {
    0% {
      background-position: -600px 0;
    }
    100% {
      background-position: 600px 0;
    }
  }

  .gallery-item-img,
  .gallery-image,
  .property-featured-img,
  .gallery-video {
    position: relative;
    z-index: 1;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }

  .building-slider {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }

  .gallery-item {
    cursor: pointer;
    overflow: hidden;
    border-radius: 4px;
  }

  .mobile-image-container,
  .mobile-video-container {
    border-radius: 8px;
    overflow: hidden;
  }
</style>

<script define:vars={{ featuredImage: property.featuredImage }}>
  window.propertyFeaturedImage = featuredImage;
</script>

<script>
  function handleImagesSidebarLayout() {
    const imagesSidebars = document.querySelectorAll('.images-sidebar');

    imagesSidebars.forEach((sidebar) => {
      const directImages = sidebar.querySelectorAll(':scope > .gallery-item');

      if (directImages.length < 3) {
        sidebar.style.gridTemplateColumns = 'none';
      } else {
        sidebar.style.gridTemplateColumns = ''; // Reset to CSS default
      }
    });
  }

  function initializePropertyDetailVideos() {
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

    window.isSafariBrowser = isSafari;
    window.safariVideoFixApplied = isSafari;

    console.log('PropertyDetail: Safari detected:', isSafari);

    if (isSafari) {
      replaceSafariVideosWithImage();
      setTimeout(() => {
        initSafariGalleryModal();
      }, 100);
    } else {
      initializePropertyVideos();
    }
  }

  function replaceSafariVideosWithImage() {
    console.log('Safari: Starting video replacement');

    let featuredImageSrc = null;

    if (window.propertyFeaturedImage) {
      featuredImageSrc = window.propertyFeaturedImage;
      console.log('Safari: Using Astro featured image:', featuredImageSrc);
    }

    if (!featuredImageSrc) {
      const existingImg = document.querySelector(
        '.images-sidebar img, .gallery-item img'
      );
      if (existingImg) {
        featuredImageSrc = existingImg.src;
        console.log('Safari: Using DOM image:', featuredImageSrc);
      }
    }

    if (!featuredImageSrc) {
      console.log('Safari: No image found, hiding videos');
      hideAllVideos();
      return;
    }

    replaceVideosWithImage(featuredImageSrc);
  }

  function hideAllVideos() {
    const allVideos = document.querySelectorAll('video');
    allVideos.forEach((video) => {
      video.style.display = 'none';
      const parent = video.parentElement;
      if (parent && parent.children.length === 1) {
        parent.style.display = 'none';
      }
    });
  }

  function replaceVideosWithImage(imageSrc) {
    console.log('Safari: Replacing videos with image:', imageSrc);

    const sidebarVideoContainers = document.querySelectorAll(
      '.images-sidebar .gallery-item'
    );
    sidebarVideoContainers.forEach((container, index) => {
      const video = container.querySelector('video');
      if (video) {
        console.log(`Safari: Replacing sidebar video ${index}`);

        const imageContainer = document.createElement('div');
        imageContainer.className = 'image-container';

        const skeleton = document.createElement('div');
        skeleton.className = 'skeleton-placeholder';

        const img = document.createElement('img');
        img.src = imageSrc;
        img.alt = 'Property featured image';
        img.className = 'property-featured-img gallery-item-img';
        img.style.opacity = '0';
        img.style.transition = 'opacity 0.3s ease';

        const dataIndex = container.getAttribute('data-index') || '0';
        container.setAttribute('data-index', dataIndex);

        if (video.getAttribute('width')) {
          img.setAttribute('width', video.getAttribute('width'));
        }

        img.onload = function () {
          this.style.opacity = '1';
          skeleton.style.display = 'none';
        };

        imageContainer.appendChild(skeleton);
        imageContainer.appendChild(img);
        container.innerHTML = '';
        container.appendChild(imageContainer);

        if (!container.classList.contains('gallery-item')) {
          container.classList.add('gallery-item');
        }
      }
    });

    const mobileGallery = document.querySelector('.glide-gallery');
    if (mobileGallery) {
      const gallerySlides = mobileGallery.querySelectorAll('.glide__slide');

      gallerySlides.forEach((slide, index) => {
        const video = slide.querySelector('video');
        if (video) {
          console.log(
            `Safari: Replacing mobile gallery video ${index} with featured image`
          );

          const imageContainer = document.createElement('div');
          imageContainer.className = 'mobile-image-container';

          const skeleton = document.createElement('div');
          skeleton.className = 'skeleton-placeholder';

          const img = document.createElement('img');
          img.src = imageSrc;
          img.alt = 'Featured Image';
          img.className = 'gallery-image';
          img.setAttribute('width', '689');
          img.setAttribute('height', '400');
          img.style.opacity = '0';
          img.style.transition = 'opacity 0.3s ease';

          img.onload = function () {
            this.style.opacity = '1';
            skeleton.style.display = 'none';
          };

          imageContainer.appendChild(skeleton);
          imageContainer.appendChild(img);
          slide.innerHTML = '';
          slide.appendChild(imageContainer);

          console.log(
            'Safari: Successfully replaced mobile gallery video with featured image'
          );
        }
      });

      const remainingSlides = mobileGallery.querySelectorAll('.glide__slide');
      console.log(
        `Safari: Mobile gallery now has ${remainingSlides.length} slides`
      );

      if (remainingSlides.length === 0) {
        console.log('Safari: No slides left in mobile gallery, hiding it');
        mobileGallery.style.display = 'none';
      }
    }

    // Replace modal videos (in modal slides)
    const modalSlides = document.querySelectorAll('.glide-modal .glide__slide');
    const modalSlidesToRemove = [];

    modalSlides.forEach((slide, index) => {
      const video = slide.querySelector('video');
      if (video) {
        console.log(`Safari: Marking modal slide video ${index} for removal`);
        modalSlidesToRemove.push(slide);
      }
    });

    // Remove video slides
    modalSlidesToRemove.forEach((slide) => slide.remove());

    // Check if modal has any slides left, if not hide modal functionality
    const modalGallery = document.querySelector('.glide-modal');
    if (modalGallery) {
      const remainingModalSlides =
        modalGallery.querySelectorAll('.glide__slide');
      if (remainingModalSlides.length === 0) {
        console.log('Safari: No slides left in modal, hiding modal');
        const modal = document.getElementById('galleryModal');
        if (modal) {
          modal.style.display = 'none';
        }
      }
    }
  }

  function initSafariGalleryModal() {
    console.log('Safari: Initializing gallery modal');

    const modal = document.getElementById('galleryModal');
    const galleryItems = document.querySelectorAll('.gallery-item');
    const closeBtn = document.querySelector('.close');

    if (!modal || !galleryItems.length) {
      console.log('Safari: No modal or gallery items found');
      return;
    }

    console.log(`Safari: Found ${galleryItems.length} gallery items`);

    // Rebuild modal slides for Safari (only images, no videos)
    const modalSlidesContainer = modal.querySelector('.glide__slides');
    if (modalSlidesContainer) {
      modalSlidesContainer.innerHTML = '';

      // Create a set to track unique image sources to prevent duplicates
      const uniqueImages = new Set();
      const validSlides = [];

      galleryItems.forEach((item, index) => {
        let img = null;
        let imageSrc = null;

        // Handle both direct img elements and img within containers
        if (item.tagName === 'IMG') {
          img = item;
          imageSrc = item.src;
        } else if (item.tagName === 'DIV') {
          img = item.querySelector('img');
          imageSrc = img ? img.src : null;
        }

        // Only add if we have an image and it's not a duplicate
        if (img && imageSrc && !uniqueImages.has(imageSrc)) {
          uniqueImages.add(imageSrc);

          const slide = document.createElement('li');
          slide.className = 'glide__slide';

          const modalImg = document.createElement('img');
          modalImg.className = 'modal-media';
          modalImg.src = imageSrc;
          modalImg.alt = img.alt || `Gallery image ${validSlides.length + 1}`;
          modalImg.style.maxWidth = '90vw';
          modalImg.style.maxHeight = '90vh';
          modalImg.style.objectFit = 'contain';
          modalImg.style.display = 'block';

          slide.appendChild(modalImg);
          modalSlidesContainer.appendChild(slide);
          validSlides.push({ element: item, slideIndex: validSlides.length });

          console.log(`Safari: Added unique slide for ${img.alt || 'image'}`);
        } else if (imageSrc && uniqueImages.has(imageSrc)) {
          console.log(`Safari: Skipped duplicate image: ${imageSrc}`);
        }
      });

      console.log(`Safari: Created ${validSlides.length} unique modal slides`);
    }

    // Add click handlers to gallery items with correct slide mapping
    galleryItems.forEach((item, index) => {
      // Clone element to remove existing listeners
      const newItem = item.cloneNode(true);
      const parent = item.parentNode;
      parent.replaceChild(newItem, item);

      newItem.addEventListener('click', function (event) {
        event.preventDefault();
        event.stopPropagation();

        // Find the corresponding slide index for this image
        let imageSrc = null;
        if (newItem.tagName === 'IMG') {
          imageSrc = newItem.src;
        } else if (newItem.tagName === 'DIV') {
          const img = newItem.querySelector('img');
          imageSrc = img ? img.src : null;
        }

        // Find the slide index that matches this image source
        let slideIndex = 0;
        if (imageSrc) {
          const modalSlides = modal.querySelectorAll('.glide__slide img');
          modalSlides.forEach((modalImg, idx) => {
            if (modalImg.src === imageSrc) {
              slideIndex = idx;
            }
          });
        }

        console.log(
          `Safari: Gallery item clicked, opening modal at slide ${slideIndex}`
        );

        // Show modal
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';

        // Initialize Glide slider
        setTimeout(() => {
          initSafariModalSlider(slideIndex);
        }, 50);
      });
    });

    // Close modal handlers
    function closeModal() {
      modal.style.display = 'none';
      document.body.style.overflow = '';

      if (window.safariModalGlide) {
        try {
          window.safariModalGlide.destroy();
        } catch (e) {}
        window.safariModalGlide = null;
      }
    }

    if (closeBtn) {
      closeBtn.onclick = closeModal;
    }

    modal.onclick = function (event) {
      if (event.target === modal) {
        closeModal();
      }
    };

    document.addEventListener('keydown', function (event) {
      if (event.key === 'Escape' && modal.style.display === 'block') {
        closeModal();
      }
    });

    console.log('Safari: Gallery modal initialized');
  }

  function initSafariModalSlider(startIndex = 0) {
    console.log(`Safari: Initializing modal slider at index ${startIndex}`);

    if (typeof Glide === 'undefined') {
      console.log('Safari: Glide not available');
      return;
    }

    const modalSlider = document.querySelector('.glide-modal');
    if (!modalSlider) {
      console.log('Safari: Modal slider not found');
      return;
    }

    const slides = modalSlider.querySelectorAll('.glide__slide');
    const validIndex = Math.max(0, Math.min(startIndex, slides.length - 1));

    // Destroy existing instance
    if (window.safariModalGlide) {
      try {
        window.safariModalGlide.destroy();
      } catch (e) {}
      window.safariModalGlide = null;
    }

    try {
      window.safariModalGlide = new Glide('.glide-modal', {
        type: 'carousel',
        startAt: validIndex,
        perView: 1,
        gap: 0,
        autoplay: false,
        keyboard: true,
        rewind: true,
        animationDuration: 300,
      }).mount();

      console.log(`Safari: Modal slider initialized at index ${validIndex}`);
    } catch (error) {
      console.error('Safari: Modal slider error:', error);
    }
  }

  function initializePropertyVideos() {
    console.log('Initializing property videos for non-Safari browser');

    const videos = document.querySelectorAll('video');

    videos.forEach((video, index) => {
      console.log(`Initializing video ${index}:`, video.className);

      // Skip modal videos as they should be controlled by user
      if (video.classList.contains('modal-media')) {
        console.log(`Skipping modal video ${index}`);
        return;
      }

      // Set video properties
      video.muted = true;
      video.playsInline = true;
      video.autoplay = true;
      video.loop = true;

      // Safari-specific attributes
      video.setAttribute('webkit-playsinline', 'true');
      video.setAttribute('playsinline', 'true');

      // Try to play the video
      const playVideo = () => {
        const playPromise = video.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log(`Property video ${index} started successfully`);
            })
            .catch((error) => {
              console.log(`Property video ${index} autoplay prevented:`, error);

              const playOnInteraction = () => {
                video
                  .play()
                  .then(() =>
                    console.log(
                      `Property video ${index} started on interaction`
                    )
                  )
                  .catch((e) =>
                    console.log(
                      `Property video ${index} interaction play failed:`,
                      e
                    )
                  );
              };

              document.addEventListener('click', playOnInteraction, {
                once: true,
              });
              document.addEventListener('touchstart', playOnInteraction, {
                once: true,
              });
            });
        }
      };

      if (video.readyState >= 2) {
        playVideo();
      } else {
        video.addEventListener('loadeddata', playVideo, { once: true });
      }

      video.addEventListener('error', (e) => {
        console.error(`Property video ${index} error:`, e);
      });

      video.addEventListener('ended', () => {
        video.currentTime = 0;
        video
          .play()
          .catch((e) => console.log(`Property video ${index} loop failed:`, e));
      });
    });
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('PropertyDetail: DOM Content Loaded');
    handleImagesSidebarLayout();
    handleBackgroundImageLoad();
    initializePropertyDetailVideos();
  });

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', () => {
    console.log('PropertyDetail: After view transition');
    setTimeout(() => {
      handleImagesSidebarLayout();
      handleBackgroundImageLoad();
      initializePropertyDetailVideos();
    }, 50);
  });
</script>
