---
import Layout from '../layouts/Layout.astro';
import ContactForm from '../components/ContactForm.astro';
---

<Layout title="Contact | Lefferts" description="Connect with Lefferts.">
  <div class="hero-section contact">
    <div class="hero-vid">
      <video
        playsinline
        autoplay
        muted
        loop
        preload="metadata"
        data-contact-hero-video="true"
        style="width: 100%; height: 100%; object-fit: cover; opacity: 0; transition: opacity 0.5s ease;"
      >
        <source src="/videos/contact.mp4" type="video/mp4" />
      </video>
      <div
        class="hero-fallback"
        style="position: absolute; inset: 0; background: #fff; z-index: -1;"
      >
      </div>
    </div>
    <div
      class="hero-content"
      style="opacity: 0; transition: opacity 0.5s ease 0.2s;"
    >
      <h1>Contact Us.</h1>
    </div>
  </div>

  <div class="form-vid-wrapper">
    <ContactForm />
    <video
      playsinline
      autoplay
      muted
      loop
      preload="metadata"
      data-form-video="true"
      style="opacity: 0; transition: opacity 0.5s ease;"
    >
      <source src="/videos/contact.mp4" type="video/mp4" />
    </video>
  </div>
</Layout>

<script>
  function initializeContactVideos() {
    const heroVideo = document.querySelector('[data-contact-hero-video]');
    const formVideo = document.querySelector('[data-form-video]');
    const heroContent = document.querySelector('.hero-content');

    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

    console.log('Safari detected:', isSafari);

    if (isSafari) {
      initializeSafariImageFallback(
        heroVideo,
        '/images/contact-header.webp',
        () => {
          if (heroContent) {
            heroContent.style.opacity = '1';
          }
        }
      );

      initializeSafariImageFallback(formVideo, '/images/contact-header.webp');
    } else {
      if (heroVideo) {
        initializeVideo(heroVideo, () => {
          if (heroContent) {
            heroContent.style.opacity = '1';
          }
        });
      } else {
        if (heroContent) {
          heroContent.style.opacity = '1';
        }
      }

      if (formVideo) {
        initializeVideo(formVideo);
      }
    }
  }

  function initializeSafariImageFallback(videoElement, imageSrc, onReady) {
    if (!videoElement) return;

    console.log('Replacing video with image for Safari:', imageSrc);

    const img = document.createElement('img');
    img.src = imageSrc;
    img.alt = 'Contact background';
    img.style.cssText = `
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.5s ease;
  `;

    img.className = videoElement.className;

    const showImage = () => {
      img.style.opacity = '1';
      if (onReady) {
        setTimeout(onReady, 100);
      }
    };

    img.addEventListener('load', () => {
      console.log('Safari fallback image loaded successfully');
      showImage();
    });

    img.addEventListener('error', () => {
      console.error('Safari fallback image failed to load:', imageSrc);
      showImage();
    });

    const parent = videoElement.parentNode;
    if (parent) {
      parent.replaceChild(img, videoElement);
    }
    if (img.complete) {
      showImage();
    }
  }

  function initializeVideo(video, onReady) {
    if (!video) return;

    video.muted = true;
    video.playsInline = true;
    video.autoplay = true;
    video.loop = true;

    video.setAttribute('webkit-playsinline', 'true');
    video.setAttribute('playsinline', 'true');

    let videoStarted = false;

    const showVideo = () => {
      if (!videoStarted) {
        video.style.opacity = '1';
        videoStarted = true;

        if (onReady) {
          setTimeout(onReady, 100);
        }
      }
    };

    const startVideo = () => {
      video.currentTime = 0;
      const playPromise = video.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log('Contact video started successfully');
            showVideo();
          })
          .catch((error) => {
            console.log('Contact video autoplay prevented:', error);
            showVideo();

            // Try again on user interaction
            const playOnTouch = () => {
              video
                .play()
                .then(() => {
                  console.log('Contact video started on interaction');
                  showVideo();
                })
                .catch((e) =>
                  console.log('Contact video interaction play failed:', e)
                );
            };

            document.addEventListener('click', playOnTouch, { once: true });
            document.addEventListener('touchstart', playOnTouch, {
              once: true,
            });
          });
      }
    };

    // Start video when it's ready
    if (video.readyState >= 2) {
      startVideo();
    } else {
      video.addEventListener('loadeddata', startVideo, { once: true });
      video.addEventListener(
        'canplaythrough',
        () => {
          if (!videoStarted) startVideo();
        },
        { once: true }
      );

      // Fallback timeout to show video
      setTimeout(() => {
        if (!videoStarted) {
          console.log('Contact video loading timeout, showing anyway');
          showVideo();
        }
      }, 2000);
    }

    // Handle video errors
    video.addEventListener('error', (e) => {
      console.error('Contact video error:', e);
      showVideo(); // Show video element even on error
    });

    // Ensure proper looping
    video.addEventListener('ended', () => {
      video.currentTime = 0;
      video.play().catch((e) => console.log('Contact video loop failed:', e));
    });
  }

  // Initialize immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeContactVideos);
  } else {
    initializeContactVideos();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initializeContactVideos, 50);
  });
</script>
